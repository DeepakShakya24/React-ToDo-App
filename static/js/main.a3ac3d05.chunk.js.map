{"version":3,"sources":["components/ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","className","type","value","content","onChange","change","icon","onClick","clicked","library","add","faTrash","App","state","items","currentitem","key","changeHandler","event","setState","target","Date","now","handleSubmit","preventDefault","newitem","newitems","console","log","deleteitem","filterItem","filter","item","setUpdate","map","a","this","e","onSubmit","id","name","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oTAqBeA,EAlBE,SAACC,GAChB,OACE,yBAAKC,UAAU,aACb,2BACE,2BAAOC,KAAK,OAAOC,MAAOH,EAAMI,QAASC,SAAUL,EAAMM,SACzD,8BACE,kBAAC,IAAD,CACEL,UAAU,UACVM,KAAK,QACLC,QAASR,EAAMS,c,cCP3BC,IAAQC,IAAIC,K,IAgFGC,E,4MA9EbC,MAAQ,CACNC,MAAO,GACPC,YAAa,CACXC,IAAK,GACLb,QAAS,K,EAGbc,cAAgB,SAACC,GACf,EAAKC,SAAS,CACZJ,YAAa,CACXZ,QAASe,EAAME,OAAOlB,MACtBc,IAAKK,KAAKC,U,EAIhBC,aAAe,SAACL,GACdA,EAAMM,iBACN,IAAMC,EAAU,EAAKZ,MAAME,YAC3B,GAAwB,KAApBU,EAAQtB,QAAgB,CAC1B,IAAMuB,EAAQ,sBAAO,EAAKb,MAAMC,OAAlB,CAAyBW,IACvC,EAAKN,SAAS,CACZL,MAAOY,EACPX,YAAa,CACXC,IAAK,GACLb,QAAS,MAKfwB,QAAQC,IAAI,EAAKf,MAAMC,Q,EAEzBe,WAAa,SAACb,GACZ,IAAMc,EAAa,EAAKjB,MAAMC,MAAMiB,QAAO,SAACC,GAAD,OAAUA,EAAKhB,MAAQA,KAElE,EAAKG,SAAS,CACZL,MAAOgB,K,EAGXG,UAAY,SAAC9B,EAASa,GACpB,IAAMF,EAAQ,EAAKD,MAAMC,MACzBA,EAAMoB,KAAI,SAACF,GACLA,EAAKhB,MAAQA,IACfgB,EAAK7B,QAAUA,MAGnB,EAAKgB,SAAS,CACZL,MAAOA,K,uDAGD,IAAD,OACDqB,EAAIC,KAAKvB,MAAMC,MAAMoB,KAAI,SAACF,GAC9B,OACE,kBAAC,EAAD,CACE7B,QAAS6B,EAAK7B,QACda,IAAKgB,EAAKhB,IACVR,QAAS,kBAAM,EAAKqB,WAAWG,EAAKhB,MACpCX,OAAQ,SAACgC,GAAD,OAAO,EAAKJ,UAAUI,EAAEjB,OAAOlB,MAAO8B,EAAKhB,WAIzD,OACE,yBAAKhB,UAAU,QACb,0BAAMsC,SAAUF,KAAKb,aAAcgB,GAAG,cACpC,2BACEtC,KAAK,OACLuC,KAAK,UACLC,YAAY,eACZrC,SAAUgC,KAAKnB,gBAEjB,4BAAQjB,UAAU,kBAAkBC,KAAK,UAAzC,QAIDkC,O,GA1ESO,a,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.a3ac3d05.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./listitem.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nconst ListItem = (props) => {\n  return (\n    <div className=\"liststyle\">\n      <p>\n        <input type=\"text\" value={props.content} onChange={props.change} />\n        <span>\n          <FontAwesomeIcon\n            className=\"faicons\"\n            icon=\"trash\"\n            onClick={props.clicked}\n          />\n        </span>\n      </p>\n      {/* <button type=\"submit\" onClick={props.clicked}></button> */}\n    </div>\n  );\n};\n\nexport default ListItem;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListItem from \"./components/ListItem\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nlibrary.add(faTrash);\nclass App extends Component {\n  state = {\n    items: [],\n    currentitem: {\n      key: \"\",\n      content: \"\",\n    },\n  };\n  changeHandler = (event) => {\n    this.setState({\n      currentitem: {\n        content: event.target.value,\n        key: Date.now(),\n      },\n    });\n  };\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const newitem = this.state.currentitem;\n    if (newitem.content !== \"\") {\n      const newitems = [...this.state.items, newitem];\n      this.setState({\n        items: newitems,\n        currentitem: {\n          key: \"\",\n          content: \"\",\n        },\n      });\n    }\n\n    console.log(this.state.items);\n  };\n  deleteitem = (key) => {\n    const filterItem = this.state.items.filter((item) => item.key !== key);\n\n    this.setState({\n      items: filterItem,\n    });\n  };\n  setUpdate = (content, key) => {\n    const items = this.state.items;\n    items.map((item) => {\n      if (item.key === key) {\n        item.content = content;\n      }\n    });\n    this.setState({\n      items: items,\n    });\n  };\n  render() {\n    const a = this.state.items.map((item) => {\n      return (\n        <ListItem\n          content={item.content}\n          key={item.key}\n          clicked={() => this.deleteitem(item.key)}\n          change={(e) => this.setUpdate(e.target.value, item.key)}\n        />\n      );\n    });\n    return (\n      <div className=\"form\">\n        <form onSubmit={this.handleSubmit} id=\"to-do-form\">\n          <input\n            type=\"text\"\n            name=\"content\"\n            placeholder=\"Enter a text\"\n            onChange={this.changeHandler}\n          />\n          <button className=\"btn btn-primary\" type=\"submit\">\n            Add\n          </button>\n        </form>\n        {a}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}